unit main;

interface


uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, Grids;
  const
    size = 20;
  type
    vector = array [1..size] of extended;
    vector1 = array [1..size] of integer;
    vector2 = array [1..size] of extended;
    vector3 = array [1..size] of extended;
  var
    x: vector;
    //dfatx: arr;

type
  TForm1 = class(TForm)
    inputLoadEntries: TButton;
    inputShowEntries: TStringGrid;
    inputEntries: TEdit;
    outputShowResults: TStringGrid;
    labelInitialValues: TLabel;
    labelComputedResults: TLabel;
    labelNumberOfVariables: TLabel;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    inputShowEntriesInt: TStringGrid;
    outputShowResultsInt: TStringGrid;
    labelNumberOfIntervals: TLabel;
    inputLoadEntriesInt: TButton;
    labelInitialIntervals: TLabel;
    labelComputedIntervals: TLabel;
    inputEntriesInt: TEdit;
    inputCompute: TButton;
    inputComputeInt: TButton;
    procedure inputLoadEntriesClick(Sender: TObject);
    procedure inputLoadEntriesIntClick(Sender: TObject);
    procedure inputComputeClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

function f(i,n:Integer) : Extended; far;
begin
  case i of
    1: f:=3*x[1]-Cos(x[2]*x[3])-0.5;
    2: f:=Sqr(x[1])-81*Sqr(x[2]+0.1)+Sin(x[3])+1.06;
    3: f:=Exp(-x[1]*x[2])+20*x[3]+(10*Pi-3)/3;
  end
end;

procedure df (i, n: Integer); far;
begin
  case i of
    1: begin
      dfatx[1]:=3;
      dfatx[2]:=x[3]*Sin(x[2]*x[3]);
      dfatx[3]:=x[2]*Sin(x[2]*x[3])
    end;
    2: begin
      dfatx[1]:=2*x[1];
      dfatx[2]:=-162*(x[2]+0.1);
      dfatx[3]:=Cos(x[3])
    end;
    3: begin
      dfatx[1]:=-x[2]*Exp(-x[1]*x[2]);
      dfatx[2]:=-x[1]*Exp(-x[1]*x[2]);
      dfatx[3]:=20
    end
  end
end;

procedure showEntries(opt, count: Integer); far;
var i:Integer;
begin
  Form1.inputShowEntries.RowCount:=count;
  Form1.inputShowEntries.Cells[0,0]:='xs';
  Form1.inputShowEntries.Cells[1,0]:='values';
  for i:=1 to count do
    begin
      Form1.inputShowEntries.Cells[1,i]:='0';
      Form1.inputShowEntries.Cells[0,i]:='x'+IntToStr(i);
    end
end;

procedure showEntriesInt(opt, count: Integer); far;
var i:Integer;
begin
  Form1.inputShowEntriesInt.RowCount:=count;
  Form1.inputShowEntriesInt.Cells[0,0]:='xs';
  Form1.inputShowEntriesInt.Cells[1,0]:='values.left';
  Form1.inputShowEntriesInt.Cells[2,0]:='values.right';
  for i:=1 to count do
    begin
      Form1.inputShowEntriesInt.Cells[1,i]:='0';
      Form1.inputShowEntriesInt.Cells[2,i]:='0';
      Form1.inputShowEntriesInt.Cells[0,i]:='x'+IntToStr(i);
    end
end;

procedure showResults(opt, count: Integer); far;
var i:Integer;
begin
  Form1.outputShowResults.RowCount:=count;
  Form1.outputShowResults.Cells[0,0]:='xs';
  Form1.outputShowResults.Cells[1,0]:='results';
  for i:=1 to count do
    begin
      if opt=0 then
        Form1.outputShowResults.Cells[1,i]:='-';
      Form1.outputShowResults.Cells[0,i]:='x'+IntToStr(i);
    end
end;

procedure showResultsInt(opt, count: Integer); far;
var i:Integer;
begin
  Form1.outputShowResultsInt.RowCount:=count;
  Form1.outputShowResultsInt.Cells[0,0]:='xs';
  Form1.outputShowResultsInt.Cells[1,0]:='results.left';
  Form1.outputShowResultsInt.Cells[2,0]:='results.right';
  for i:=1 to count do
    begin
      if opt=0 then
        begin
          Form1.outputShowResultsInt.Cells[1,i]:='-';
          Form1.outputShowResultsInt.Cells[2,i]:='-';
        end;
      Form1.outputShowResultsInt.Cells[0,i]:='x'+IntToStr(i);
    end
end;

procedure TForm1.inputLoadEntriesClick(Sender: TObject);
var
  res: extended;
  it,st,i, n: integer;
begin
  try
    n:=strToInt(inputEntries.Text)+1;
    showEntries(0, n);
    showResults(0, n);
  except
    on Exception : EConvertError do
      ShowMessage('Not an integer!');
  end;
end;

procedure TForm1.inputLoadEntriesIntClick(Sender: TObject);
var
  n: integer;
begin
  try
    n:=strToInt(inputEntriesInt.Text)+1;
    showEntriesInt(0, n);
    showResultsInt(0, n);
  except
  end;
end;

procedure TForm1.inputComputeClick(Sender: TObject);
begin
  ShowMessage ('lecim');
end;

end.
